#!/usr/bin/env python3
# Copyright (c) 2018 Princeton University
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of Princeton University nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY PRINCETON UNIVERSITY "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL PRINCETON UNIVERSITY BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

from optparse import OptionParser
import xml.etree.ElementTree as ET
import dbg
import subprocess, shlex, os, sys


DV_ROOT = os.environ['DV_ROOT']

class SynConfig:
    def __init__(self, design, board):
        self.design = design
        self.board = board
        self.opt = ""

    def addOpt(self, opt, val):
        self.opt += " --" + opt
        if val != None:
            self.opt += " " + val

    def __str__(self):
        return "Design: '%s', Board: '%s', Options: '%s'" % (self.design, self.board, self.opt)

    def getSynCmd(self):
        return "protosyn -b %s -d %s%s --slurm --swait" % (self.board, self.design, self.opt)


def checkCmdOptions(options):
    if options.bundle == None:
        dbg.print_error("--bundle option is required")
        return False

    return True

def parseBundle(bundle):
    fname = bundle + ".xml"
    fpath = os.path.join(DV_ROOT, "tools/src/proto", fname)
    tree = ET.parse(fpath)

    cfg_l = list()
    root = tree.getroot()
    for design in root:
        for board in design:
            syn_cfg = SynConfig(design.tag, board.get('name'))
            for opt in board:
                syn_cfg.addOpt(opt.tag, opt.text)
            cfg_l.append(syn_cfg)

    return cfg_l

def main():
    parser = OptionParser()
    parser.add_option("--bundle", dest="bundle", action="store", help="bundle name", default=None)
    (options, args) = parser.parse_args()

    if not checkCmdOptions(options):
        parser.print_help()
        sys.exit(1)

    syn_cfg_l = parseBundle(options.bundle)
    exit_code = 0
    for cfg in  syn_cfg_l:
        cmd = cfg.getSynCmd()
        dbg.print_info("#############################################################")
        dbg.print_info("Running command: '%s'" % cmd)
        pid = subprocess.Popen(shlex.split(cmd))
        pid.communicate()
        rc = pid.returncode
        if rc != 0:
            exit_code = 1

    sys.exit(exit_code)


if __name__ == "__main__":
    main()
